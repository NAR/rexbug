=proc:<0.150.0>
State: Running
Spawned as: proc_lib:init_p/5
Last scheduled in for: ets:all/0
Spawned by: <0.51.0>
Started: Wed Feb  7 21:45:50 2018
Message queue length: 0
Number of heap fragments: 0
Heap fragment data: 0
Link list: [{from,<0.51.0>,#Ref<0.0.7.3>}]
Dictionary: [{iex_history,#{'__struct__'=>'Elixir.IEx.History.State',queue=>{[{27,"Rexbug.start(\":ets.all() :: stack,return\", opts)\n",{82,1}},{26,"g.()\n",[69665,httpc_hex__handler_db,httpc_hex__session_db,hex_version,65565,httpc_manager__handler_db,httpc_manager__session_db,61466,57369,53272,40983,36886,ssl_pem_cache,45076,49171,'Elixir.IEx.Config',elixir_modules,elixir_config,file_io_servers,inet_hosts_file_byaddr,inet_hosts_file_byname,inet_hosts_byaddr,inet_hosts_byname,inet_cache,inet_db,global_pid_ids,global_pid_names,global_names_ext,global_names,global_locks,4098,1,ac_tab]},{25,"g = fn() -> :ets.all() end\n",#Fun<erl_eval.20.118419387>},{24,"Rexbug.start(\":ets.all() :: stack,return\")\n",{82,1}},{23,"g = fn() -> :ets.all() end\n",#Fun<erl_eval.20.118419387>},{22,"Rexbug.start(:receive, opts)\n",{82,0}},{21,"Rexbug.start(:receive, opts)\n",redbug_already_started},{20,"Rexbug.start(:receive, [procs: :new] ++ opts)\n",{0,0}},{19,"spawn fn() -> send(self(), :wat) end\n",<0.211.0>},{18,"Rexbug.start(:send, [procs: :new] ++ opts)\n",{0,0}},{17,"Rexbug.start(:send, opts)\n",{82,0}},{16,"spawn fn() -> send(self(), :wat) end\n",<0.196.0>},{15,"spawn fn() -> URI.parse(\"https://example.com\") end\n",<0.194.0>},{14,"Rexbug.start(\"URI.parse/1 :: stack,return\", opts)\n",{82,1}},{13,"spawn fn() -> URI.parse(\"https://example.com\") end\n",<0.187.0>},{12,"Rexbug.start(\"URI.parse/1 :: stack\", opts)\n",{82,1}},{11,"spawn fn() -> URI.parse(\"https://example.com\") end\n",<0.180.0>}],[{8,"URI.parse(\"https://example.com\")\n",#{'__struct__'=>'Elixir.URI',authority=><<"example.com">>,fragment=>nil,host=><<"example.com">>,path=>nil,port=>443,query=>nil,scheme=><<"https">>,userinfo=>nil}},{9,"Rexbug.start(\"URI.parse/1 :: stack\", opts)\n",{82,1}},{10,"URI.parse(\"https://example.com\")\n",#{'__struct__'=>'Elixir.URI',authority=><<"example.com">>,fragment=>nil,host=><<"example.com">>,path=>nil,port=>443,query=>nil,scheme=><<"https">>,userinfo=>nil}}]},size=>27,start=>8}},{'$ancestors',[<0.51.0>]},{'$initial_call',{'Elixir.IEx.Evaluator',init,4}}]
Reductions: 62411
Stack+heap: 1598
OldHeap: 6772
Heap unused: 665
OldHeap unused: 2236
Memory: 67960
Stack dump:
Program counter: 0x00000000188f7f58 (unknown function)
CP: 0x000000001761ed48 (erl_eval:do_apply/6 + 560)

0x0000000018a904c0 Return addr 0x0000000019b89388 (elixir:erl_eval/3 + 496)
y(0)     [{'_@0',#Fun<erl_eval.20.118419387>},{'_@1',[{print_fun,#Fun<erl_eval.6.118419387>}]},{'_@2',#Fun<erl_eval.6.118419387>}]
y(1)     []

0x0000000018a904d8 Return addr 0x0000000019b89038 (elixir:eval_forms/4 + 600)
y(0)     []
y(1)     []
y(2)     Catch 0x0000000019b893a8 (elixir:erl_eval/3 + 528)

0x0000000018a904f8 Return addr 0x00000000175d3300 ('Elixir.IEx.Evaluator':handle_eval/6 + 1312)
y(0)     []
y(1)     {elixir_scope,nil,nil,false,false,nil,nil,#{{g,nil}=>{'_@0',0,true},{opts,nil}=>{'_@1',0,true},{pf,nil}=>{'_@2',0,true}},nil,nil,nil,nil,#{'_'=>3},<<"iex">>}
y(2)     #{'__struct__'=>'Elixir.Macro.Env',aliases=>[],context=>nil,context_modules=>[],export_vars=>nil,file=><<"iex">>,function=>nil,functions=>[{'Elixir.IEx.Helpers',[{c,1},{c,2},{cd,1},{clear,0},{flush,0},{h,0},{i,1},{l,1},{ls,0},{ls,1},{nl,1},{nl,2},{pid,1},{pid,3},{pwd,0},{r,1},{recompile,0},{respawn,0},{v,0},{v,1}]},{'Elixir.Kernel',[{'!=',2},{'!==',2},{'*',2},{'+',1},{'+',2},{'++',2},{'-',1},{'-',2},{'--',2},{'/',2},{'<',2},{'<=',2},{'==',2},{'===',2},{'=~',2},{'>',2},{'>=',2},{abs,1},{apply,2},{apply,3},{binary_part,3},{bit_size,1},{byte_size,1},{div,2},{elem,2},{exit,1},{'function_exported?',3},{get_and_update_in,3},{get_in,2},{hd,1},{inspect,1},{inspect,2},{is_atom,1},{is_binary,1},{is_bitstring,1},{is_boolean,1},{is_float,1},{is_function,1},{is_function,2},{is_integer,1},{is_list,1},{is_map,1},{is_number,1},{is_pid,1},{is_port,1},{is_reference,1},{is_tuple,1},{length,1},{'macro_exported?',3},{make_ref,0},{map_size,1},{max,2},{min,2},{node,0},{node,1},{not,1},{pop_in,2},{put_elem,3},{put_in,3},{rem,2},{round,1},{self,0},{send,2},{spawn,1},{spawn,3},{spawn_link,1},{spawn_link,3},{spawn_monitor,1},{spawn_monitor,3},{struct,1},{struct,2},{'struct!',1},{'struct!',2},{throw,1},{tl,1},{trunc,1},{tuple_size,1},{update_in,3}]}],lexical_tracker=>nil,line=>1,macro_aliases=>[],macros=>[{'Elixir.IEx.Helpers',[{b,1},{h,1},{import_file,1},{import_file,2},{import_file_if_available,1},{import_if_available,1},{import_if_available,2},{s,1},{t,1}]},{'Elixir.Kernel',[{'!',1},{'&&',2},{'..',2},{'<>',2},{'@',1},{'alias!',1},{and,2},{binding,0},{binding,1},{def,1},{def,2},{defdelegate,2},{defexception,1},{defimpl,2},{defimpl,3},{defmacro,1},{defmacro,2},{defmacrop,1},{defmacrop,2},{defmodule,2},{defoverridable,1},{defp,1},{defp,2},{defprotocol,2},{defstruct,1},{destructure,2},{get_and_update_in,2},{if,2},{in,2},{is_nil,1},{'match?',2},{or,2},{pop_in,1},{put_in,2},{raise,1},{raise,2},{reraise,2},{reraise,3},{sigil_C,2},{sigil_D,2},{sigil_N,2},{sigil_R,2},{sigil_S,2},{sigil_T,2},{sigil_W,2},{sigil_c,2},{sigil_r,2},{sigil_s,2},{sigil_w,2},{to_char_list,1},{to_charlist,1},{to_string,1},{unless,2},{update_in,2},{use,1},{use,2},{'var!',1},{'var!',2},{'|>',2},{'||',2}]}],module=>nil,requires=>['Elixir.IEx.Helpers','Elixir.Kernel','Elixir.Kernel.Typespec'],vars=>[{g,nil},{opts,nil},{pf,nil}]}

0x0000000018a90518 Return addr 0x00000000175d2018 ('Elixir.IEx.Evaluator':do_eval/4 + 2064)
y(0)     []
y(1)     []
y(2)     []
y(3)     []
y(4)     #{binding=>[{g,#Fun<erl_eval.20.118419387>},{opts,[{print_fun,#Fun<erl_eval.6.118419387>}]},{pf,#Fun<erl_eval.6.118419387>}],env=>#{'__struct__'=>'Elixir.Macro.Env',aliases=>[],context=>nil,context_modules=>[],export_vars=>nil,file=><<"iex">>,function=>nil,functions=>[{'Elixir.IEx.Helpers',[{c,1},{c,2},{cd,1},{clear,0},{flush,0},{h,0},{i,1},{l,1},{ls,0},{ls,1},{nl,1},{nl,2},{pid,1},{pid,3},{pwd,0},{r,1},{recompile,0},{respawn,0},{v,0},{v,1}]},{'Elixir.Kernel',[{'!=',2},{'!==',2},{'*',2},{'+',1},{'+',2},{'++',2},{'-',1},{'-',2},{'--',2},{'/',2},{'<',2},{'<=',2},{'==',2},{'===',2},{'=~',2},{'>',2},{'>=',2},{abs,1},{apply,2},{apply,3},{binary_part,3},{bit_size,1},{byte_size,1},{div,2},{elem,2},{exit,1},{'function_exported?',3},{get_and_update_in,3},{get_in,2},{hd,1},{inspect,1},{inspect,2},{is_atom,1},{is_binary,1},{is_bitstring,1},{is_boolean,1},{is_float,1},{is_function,1},{is_function,2},{is_integer,1},{is_list,1},{is_map,1},{is_number,1},{is_pid,1},{is_port,1},{is_reference,1},{is_tuple,1},{length,1},{'macro_exported?',3},{make_ref,0},{map_size,1},{max,2},{min,2},{node,0},{node,1},{not,1},{pop_in,2},{put_elem,3},{put_in,3},{rem,2},{round,1},{self,0},{send,2},{spawn,1},{spawn,3},{spawn_link,1},{spawn_link,3},{spawn_monitor,1},{spawn_monitor,3},{struct,1},{struct,2},{'struct!',1},{'struct!',2},{throw,1},{tl,1},{trunc,1},{tuple_size,1},{update_in,3}]}],lexical_tracker=>nil,line=>1,macro_aliases=>[],macros=>[{'Elixir.IEx.Helpers',[{b,1},{h,1},{import_file,1},{import_file,2},{import_file_if_available,1},{import_if_available,1},{import_if_available,2},{s,1},{t,1}]},{'Elixir.Kernel',[{'!',1},{'&&',2},{'..',2},{'<>',2},{'@',1},{'alias!',1},{and,2},{binding,0},{binding,1},{def,1},{def,2},{defdelegate,2},{defexception,1},{defimpl,2},{defimpl,3},{defmacro,1},{defmacro,2},{defmacrop,1},{defmacrop,2},{defmodule,2},{defoverridable,1},{defp,1},{defp,2},{defprotocol,2},{defstruct,1},{destructure,2},{get_and_update_in,2},{if,2},{in,2},{is_nil,1},{'match?',2},{or,2},{pop_in,1},{put_in,2},{raise,1},{raise,2},{reraise,2},{reraise,3},{sigil_C,2},{sigil_D,2},{sigil_N,2},{sigil_R,2},{sigil_S,2},{sigil_T,2},{sigil_W,2},{sigil_c,2},{sigil_r,2},{sigil_s,2},{sigil_w,2},{to_char_list,1},{to_charlist,1},{to_string,1},{unless,2},{update_in,2},{use,1},{use,2},{'var!',1},{'var!',2},{'|>',2},{'||',2}]}],module=>nil,requires=>['Elixir.IEx.Helpers','Elixir.Kernel','Elixir.Kernel.Typespec'],vars=>[{g,nil},{opts,nil},{pf,nil}]},scope=>{elixir_scope,nil,nil,false,false,nil,nil,#{{g,nil}=>{'_@0',0,true},{opts,nil}=>{'_@1',0,true},{pf,nil}=>{'_@2',0,true}},nil,nil,nil,nil,#{'_'=>3},<<"iex">>}}
y(5)     #{'__struct__'=>'Elixir.IEx.History.State',queue=>{[{27,"Rexbug.start(\":ets.all() :: stack,return\", opts)\n",{82,1}},{26,"g.()\n",[69665,httpc_hex__handler_db,httpc_hex__session_db,hex_version,65565,httpc_manager__handler_db,httpc_manager__session_db,61466,57369,53272,40983,36886,ssl_pem_cache,45076,49171,'Elixir.IEx.Config',elixir_modules,elixir_config,file_io_servers,inet_hosts_file_byaddr,inet_hosts_file_byname,inet_hosts_byaddr,inet_hosts_byname,inet_cache,inet_db,global_pid_ids,global_pid_names,global_names_ext,global_names,global_locks,4098,1,ac_tab]},{25,"g = fn() -> :ets.all() end\n",#Fun<erl_eval.20.118419387>},{24,"Rexbug.start(\":ets.all() :: stack,return\")\n",{82,1}},{23,"g = fn() -> :ets.all() end\n",#Fun<erl_eval.20.118419387>},{22,"Rexbug.start(:receive, opts)\n",{82,0}},{21,"Rexbug.start(:receive, opts)\n",redbug_already_started},{20,"Rexbug.start(:receive, [procs: :new] ++ opts)\n",{0,0}},{19,"spawn fn() -> send(self(), :wat) end\n",<0.211.0>},{18,"Rexbug.start(:send, [procs: :new] ++ opts)\n",{0,0}},{17,"Rexbug.start(:send, opts)\n",{82,0}},{16,"spawn fn() -> send(self(), :wat) end\n",<0.196.0>},{15,"spawn fn() -> URI.parse(\"https://example.com\") end\n",<0.194.0>},{14,"Rexbug.start(\"URI.parse/1 :: stack,return\", opts)\n",{82,1}},{13,"spawn fn() -> URI.parse(\"https://example.com\") end\n",<0.187.0>},{12,"Rexbug.start(\"URI.parse/1 :: stack\", opts)\n",{82,1}},{11,"spawn fn() -> URI.parse(\"https://example.com\") end\n",<0.180.0>}],[{8,"URI.parse(\"https://example.com\")\n",#{'__struct__'=>'Elixir.URI',authority=><<"example.com">>,fragment=>nil,host=><<"example.com">>,path=>nil,port=>443,query=>nil,scheme=><<"https">>,userinfo=>nil}},{9,"Rexbug.start(\"URI.parse/1 :: stack\", opts)\n",{82,1}},{10,"URI.parse(\"https://example.com\")\n",#{'__struct__'=>'Elixir.URI',authority=><<"example.com">>,fragment=>nil,host=><<"example.com">>,path=>nil,port=>443,query=>nil,scheme=><<"https">>,userinfo=>nil}}]},size=>27,start=>8}
y(6)     #{'__struct__'=>'Elixir.IEx.State',cache=>[],counter=>28,prefix=><<"iex">>}
y(7)     28
y(8)     "g.()\n"

0x0000000018a90568 Return addr 0x00000000175d2148 ('Elixir.IEx.Evaluator':eval/4 + 120)
y(0)     []
y(1)     []
y(2)     []
y(3)     []
y(4)     []
y(5)     Catch 0x00000000175d2058 ('Elixir.IEx.Evaluator':do_eval/4 + 2128)

0x0000000018a905a0 Return addr 0x00000000175d3f70 ('Elixir.IEx.Evaluator':loop/3 + 464)
y(0)     []
y(1)     #{binding=>[{g,#Fun<erl_eval.20.118419387>},{opts,[{print_fun,#Fun<erl_eval.6.118419387>}]},{pf,#Fun<erl_eval.6.118419387>}],env=>#{'__struct__'=>'Elixir.Macro.Env',aliases=>[],context=>nil,context_modules=>[],export_vars=>nil,file=><<"iex">>,function=>nil,functions=>[{'Elixir.IEx.Helpers',[{c,1},{c,2},{cd,1},{clear,0},{flush,0},{h,0},{i,1},{l,1},{ls,0},{ls,1},{nl,1},{nl,2},{pid,1},{pid,3},{pwd,0},{r,1},{recompile,0},{respawn,0},{v,0},{v,1}]},{'Elixir.Kernel',[{'!=',2},{'!==',2},{'*',2},{'+',1},{'+',2},{'++',2},{'-',1},{'-',2},{'--',2},{'/',2},{'<',2},{'<=',2},{'==',2},{'===',2},{'=~',2},{'>',2},{'>=',2},{abs,1},{apply,2},{apply,3},{binary_part,3},{bit_size,1},{byte_size,1},{div,2},{elem,2},{exit,1},{'function_exported?',3},{get_and_update_in,3},{get_in,2},{hd,1},{inspect,1},{inspect,2},{is_atom,1},{is_binary,1},{is_bitstring,1},{is_boolean,1},{is_float,1},{is_function,1},{is_function,2},{is_integer,1},{is_list,1},{is_map,1},{is_number,1},{is_pid,1},{is_port,1},{is_reference,1},{is_tuple,1},{length,1},{'macro_exported?',3},{make_ref,0},{map_size,1},{max,2},{min,2},{node,0},{node,1},{not,1},{pop_in,2},{put_elem,3},{put_in,3},{rem,2},{round,1},{self,0},{send,2},{spawn,1},{spawn,3},{spawn_link,1},{spawn_link,3},{spawn_monitor,1},{spawn_monitor,3},{struct,1},{struct,2},{'struct!',1},{'struct!',2},{throw,1},{tl,1},{trunc,1},{tuple_size,1},{update_in,3}]}],lexical_tracker=>nil,line=>1,macro_aliases=>[],macros=>[{'Elixir.IEx.Helpers',[{b,1},{h,1},{import_file,1},{import_file,2},{import_file_if_available,1},{import_if_available,1},{import_if_available,2},{s,1},{t,1}]},{'Elixir.Kernel',[{'!',1},{'&&',2},{'..',2},{'<>',2},{'@',1},{'alias!',1},{and,2},{binding,0},{binding,1},{def,1},{def,2},{defdelegate,2},{defexception,1},{defimpl,2},{defimpl,3},{defmacro,1},{defmacro,2},{defmacrop,1},{defmacrop,2},{defmodule,2},{defoverridable,1},{defp,1},{defp,2},{defprotocol,2},{defstruct,1},{destructure,2},{get_and_update_in,2},{if,2},{in,2},{is_nil,1},{'match?',2},{or,2},{pop_in,1},{put_in,2},{raise,1},{raise,2},{reraise,2},{reraise,3},{sigil_C,2},{sigil_D,2},{sigil_N,2},{sigil_R,2},{sigil_S,2},{sigil_T,2},{sigil_W,2},{sigil_c,2},{sigil_r,2},{sigil_s,2},{sigil_w,2},{to_char_list,1},{to_charlist,1},{to_string,1},{unless,2},{update_in,2},{use,1},{use,2},{'var!',1},{'var!',2},{'|>',2},{'||',2}]}],module=>nil,requires=>['Elixir.IEx.Helpers','Elixir.Kernel','Elixir.Kernel.Typespec'],vars=>[{g,nil},{opts,nil},{pf,nil}]},scope=>{elixir_scope,nil,nil,false,false,nil,nil,#{{g,nil}=>{'_@0',0,true},{opts,nil}=>{'_@1',0,true},{pf,nil}=>{'_@2',0,true}},nil,nil,nil,nil,#{'_'=>3},<<"iex">>}}
y(2)     #{'__struct__'=>'Elixir.IEx.History.State',queue=>{[{27,"Rexbug.start(\":ets.all() :: stack,return\", opts)\n",{82,1}},{26,"g.()\n",[69665,httpc_hex__handler_db,httpc_hex__session_db,hex_version,65565,httpc_manager__handler_db,httpc_manager__session_db,61466,57369,53272,40983,36886,ssl_pem_cache,45076,49171,'Elixir.IEx.Config',elixir_modules,elixir_config,file_io_servers,inet_hosts_file_byaddr,inet_hosts_file_byname,inet_hosts_byaddr,inet_hosts_byname,inet_cache,inet_db,global_pid_ids,global_pid_names,global_names_ext,global_names,global_locks,4098,1,ac_tab]},{25,"g = fn() -> :ets.all() end\n",#Fun<erl_eval.20.118419387>},{24,"Rexbug.start(\":ets.all() :: stack,return\")\n",{82,1}},{23,"g = fn() -> :ets.all() end\n",#Fun<erl_eval.20.118419387>},{22,"Rexbug.start(:receive, opts)\n",{82,0}},{21,"Rexbug.start(:receive, opts)\n",redbug_already_started},{20,"Rexbug.start(:receive, [procs: :new] ++ opts)\n",{0,0}},{19,"spawn fn() -> send(self(), :wat) end\n",<0.211.0>},{18,"Rexbug.start(:send, [procs: :new] ++ opts)\n",{0,0}},{17,"Rexbug.start(:send, opts)\n",{82,0}},{16,"spawn fn() -> send(self(), :wat) end\n",<0.196.0>},{15,"spawn fn() -> URI.parse(\"https://example.com\") end\n",<0.194.0>},{14,"Rexbug.start(\"URI.parse/1 :: stack,return\", opts)\n",{82,1}},{13,"spawn fn() -> URI.parse(\"https://example.com\") end\n",<0.187.0>},{12,"Rexbug.start(\"URI.parse/1 :: stack\", opts)\n",{82,1}},{11,"spawn fn() -> URI.parse(\"https://example.com\") end\n",<0.180.0>}],[{8,"URI.parse(\"https://example.com\")\n",#{'__struct__'=>'Elixir.URI',authority=><<"example.com">>,fragment=>nil,host=><<"example.com">>,path=>nil,port=>443,query=>nil,scheme=><<"https">>,userinfo=>nil}},{9,"Rexbug.start(\"URI.parse/1 :: stack\", opts)\n",{82,1}},{10,"URI.parse(\"https://example.com\")\n",#{'__struct__'=>'Elixir.URI',authority=><<"example.com">>,fragment=>nil,host=><<"example.com">>,path=>nil,port=>443,query=>nil,scheme=><<"https">>,userinfo=>nil}}]},size=>27,start=>8}
y(3)     #{'__struct__'=>'Elixir.IEx.State',cache=>[],counter=>28,prefix=><<"iex">>}
y(4)     Catch 0x00000000175d2168 ('Elixir.IEx.Evaluator':eval/4 + 152)

0x0000000018a905d0 Return addr 0x00000000175d3928 ('Elixir.IEx.Evaluator':init/4 + 544)
y(0)     []
y(1)     []
y(2)     []
y(3)     []
y(4)     []
y(5)     []
y(6)     <0.51.0>

0x0000000018a90610 Return addr 0x000000001762f360 (proc_lib:init_p_do_apply/3 + 56)
y(0)     <0.50.0>
y(1)     Catch 0x00000000175d3970 ('Elixir.IEx.Evaluator':init/4 + 616)
y(2)     []
y(3)     []

0x0000000018a90638 Return addr 0x0000000016adace8 (<terminate process normally>)
y(0)     Catch 0x000000001762f380 (proc_lib:init_p_do_apply/3 + 88)
Internal State: ACT_PRIO_NORMAL | USR_PRIO_NORMAL | PRQ_PRIO_NORMAL | ACTIVE | RUNNING | ON_HEAP_MSGQ
